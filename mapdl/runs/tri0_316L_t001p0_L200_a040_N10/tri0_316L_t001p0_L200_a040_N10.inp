! Parametric APDL input for a 0°-family triangular isogrid (starter)
! Auto-generated by mapdl/runner.py
! Case ID: tri0_316L_t001p0_L200_a040_N10  Material: AISI 316L
! R=0.55 [m], L=2.0 [m], a=0.4 [m], n_theta=9, b=0.012 [m], t=0.001 [m], dz=0.34641016151377546 [m]

/filname,tri0_316L_t001p0_L200_a040_N10
/prep7
! Material definition
mp, ex, 1, 193000000000.0
mp, prxy, 1, 0.3
mp, dens, 1, 8000.0

! Element type: BEAM188 for ribs
et, 1, 188
keyopt, 1, 3, 3   ! 3D, 2-node

! Section: rectangular b x t
sect, 1, beam, rect, RIB
secdata, 0.012, 0.001

! Representative unwrapped panel width (circumference segment per cell)
! Width per cell in unwrapped domain is a
*set,_a, 0.4
*set,_dz_nom, 0.34641016151377546
*set,_L, 2.0
*set,_nx, 3      ! small starter grid across width (cells)
*set,_nseg, max(1, nint(_L/_dz_nom))
*set,_nz, _nseg + 1
*set,_dz, _L/_nseg
*set,u_top,0
*set,LBF,0
*set,SMAX,0
*set,_face_load,10.0
*set,_face_area,0.003452610326295235
*set,_face_pressure,2896.359291936177
*set,_mass_total,7.955786994722953
*set,_load_pair,_face_load

! Build 0° family of ribs along axial direction at x = i*_a
! Create keypoints and lines in a simple grid, then connect axial ribs

! Origin at (0,0,0); x = circumferential-unwrapped, y = radial (unused), z = axial
*do,i,0,_nx,1
  *set,xloc, i*_a
  *do,k,0,_nz-1,1
    *set,zloc, k*_dz
    k, 1000 + i*100 + k, xloc, 0, zloc
  *enddo
  *do,k,0,_nz-2,1
    l, 1000 + i*100 + k, 1000 + i*100 + (k+1)
  *enddo
*enddo

type,1
mat,1
secnum,1
lesize, all, , , 1
! Mesh lines into beam elements
lmesh, all

/solu
antype, static, new

! Simple boundary: fix bottom edge (z=0) nodes, apply small axial tip load
allsel,ALL
*set,_sel_tol,max(1e-6,_dz*1e-3)
nsel,S,LOC,Z,-_sel_tol,_sel_tol
cm,LOADZ0,NODE
d,LOADZ0,ALL,0
allsel,ALL
nsel,S,LOC,Z,_L-_sel_tol,_L+_sel_tol
cm,LOADZL,NODE
*get,_ntop,NODE,LOADZL,COUNT

! Distributed axial load applied as node-equivalent forces on top annular face
*if,_ntop,GT,0,THEN
  cmsel,S,NODE,LOADZL
  *set,_fz_top,_face_load/max(_ntop,1)
  f,ALL,FZ,_fz_top
  allsel,ALL
*endif
allsel,ALL

save    ! persist database so components remain available in POST1

solve
finish

resume,tri0_316L_t001p0_L200_a040_N10
finish

/post1
set,last
! Save key results
cmsel,S,NODE,LOADZL
*get,u_top,NODE,LOADZL,U,Z,MAX
allsel,ALL
*get,SMAX,ELEM,0,S,EQV,MAX
finish

/solu
antype,buckle
bucopt,lanb,1
pstres,on
solve
finish

/post1
set,1,1
*get,LBF,MODE,1,EIGR
finish

save
finish

*set,_buckling_face,LBF*_face_load
*set,_buckling_pair,_buckling_face
*set,_load_ref,abs(_load_pair)
*if,_load_ref,gt,1e-12,then
  *set,_tip_per_load,u_top/_load_ref
  *set,_sigma_per_load,SMAX/_load_ref
*else
  *set,_tip_per_load,0
  *set,_sigma_per_load,0
*endif
*if,_mass_total,gt,1e-12,then
  *set,_buckling_per_mass,_buckling_pair/_mass_total
*else
  *set,_buckling_per_mass,0
*endif

! Write summary CSV for downstream aggregation
*cfopen,tri0_316L_t001p0_L200_a040_N10_summary,csv
*vwrite,'case_id','material','mat_code','R_m','L_m','a_m','b_m','t_m','n_theta','tip_defl_m','buckling_factor','sigma_max_pa','axial_load_face_N','face_pressure_pa','load_pair_total_N','buckling_face_N','buckling_pair_N','total_mass_kg','buckling_per_mass','tip_per_load_m_per_N','sigma_per_load_pa_per_N','result_status'
(A32,',',A32,',',A32,',',A32,',',A32,',',A32,',',A32,',',A32,',',A32,',',A32,',',A32,',',A32,',',A32,',',A32,',',A32,',',A32,',',A32,',',A32,',',A32,',',A32,',',A32,',',A32)
*vwrite,'tri0_316L_t001p0_L200_a040_N10','AISI 316L','316L',0.55,2.0,0.4,0.012,0.001,9,u_top,LBF,SMAX,_face_load,_face_pressure,_load_pair,_buckling_face,_buckling_pair,_mass_total,_buckling_per_mass,_tip_per_load,_sigma_per_load,'pending'
(A32,',',A32,',',A32,',',E16.8,',',E16.8,',',E16.8,',',E16.8,',',E16.8,',',I8,',',E16.8,',',E16.8,',',E16.8,',',E16.8,',',E16.8,',',E16.8,',',E16.8,',',E16.8,',',E16.8,',',E16.8,',',E16.8,',',E16.8,',',A16)
*cfclose
